<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.
To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.
You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">
    <service
            verb="login"
            noun="User"
            authenticate="anonymous-view"
    >
        <in-parameters>
            <parameter name="username" type="String"/>
            <parameter name="password" type="String"/>
        </in-parameters>
        <out-parameters>
            <parameter name="result"/>
        </out-parameters>
        <actions>
            <script>
                <![CDATA[
                    def outcome = ec.user.loginUser(username, password)
                    def result = [username: username, authenticated: outcome]

                    return result
                ]]>
            </script>
        </actions>
    </service>

    <service
            verb="logout"
            noun="User"
            authenticate="anonymous-view"
    >
        <in-parameters>
        </in-parameters>
        <out-parameters>
            <parameter name="result"/>
        </out-parameters>
        <actions>
            <script>
                <![CDATA[
                    def outcome = ec.user.logoutUser()
                    def result = [logout: outcome]

                    return result
                ]]>
            </script>
        </actions>
    </service>

    <service
            verb="resetPassword"
            noun="User"
            authenticate="anonymous-view"
    >
        <in-parameters>
            <parameter name="userId"/>
            <parameter name="username"/>
        </in-parameters>
        <out-parameters>
            <parameter name="result"/>
        </out-parameters>
        <actions>
            <service-call name="org.moqui.impl.UserServices.reset#Password" in-map="context"/>

            <script>
                <![CDATA[
                    return [reset: true]
                ]]>
            </script>
        </actions>
    </service>

    <service
            verb="changePassword"
            noun="User"
            authenticate="anonymous-view"
    >
        <in-parameters>
            <parameter name="userId"/>
            <parameter name="username"/>
            <parameter name="oldPassword" required="true"/>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
        </in-parameters>
        <actions>
            <service-call name="org.moqui.impl.UserServices.update#Password" in-map="context" out-map="updateOut"/>
            <if condition="ec.message.hasError()">
                <then>
                    <set field="errDescription" from="ec.message.getErrorsString()"/>
                    <script>ec.message.clearAll()</script>
                    <return error="true" message="Exception while updating password: ${errDescription}"/>
                </then>
                <else-if condition="!updateOut.updateSuccessful">
                    <then>
                        <set field="warnings" from="ec.message.getMessagesString()"/>
                        <script>ec.message.clearAll()</script>
                        <return error="true" message="Failed password update: ${warnings}"/>
                    </then>
                </else-if>
            </if>
        </actions>
    </service>

    <!-- role-related -->
    <service verb="fetch" noun="UserRoles" authenticate="anonymous-view">
        <out-parameters>
            <parameter name="result" type="Map"/>
        </out-parameters>

        <actions>
            <script>
                <![CDATA[
                    def userGroupIdSet = ec.user.userGroupIdSet
                    return [result: [userGroupIdSet: userGroupIdSet]]
                ]]>
            </script>
        </actions>
    </service>

    <!-- is the user authorized to access frontend? -->
    <service verb="authorize" noun="FrontendAccess" authenticate="anonymous-view">
        <out-parameters>
            <parameter name="granted" type="boolean"/>
        </out-parameters>

        <actions>
            <script>
                <![CDATA[
                    def hasFrontendAccess = ec.user.isInGroup('FRONTEND_USERS')
                    ec.logger.info("User [${ec.user.username}] has access to frontend: ${hasFrontendAccess}")
                    return [granted: hasFrontendAccess]
                ]]>
            </script>
        </actions>
    </service>

    <!-- Check if the provided landing-page is authorized by the backend -->
    <!-- If not, modify the landing-page to what is set -->
    <service verb="authorize" noun="LandingPage" authenticate="anonymous-view">
        <in-parameters>
            <parameter name="landingPage"/>
        </in-parameters>
        <out-parameters>
            <parameter name="granted" type="boolean"/>
            <parameter name="landingPage"/>
        </out-parameters>

        <actions>
            <script>
                <![CDATA[
                    // clean up the starting character from landingPage
                    def cl = landingPage
                    if (cl.startsWith("/")) cl = cl.substring(1, cl.length())

                    def permToCheck = "LANDING_PAGE_${cl}"
                    // ec.logger.info("Checking permission: ${permToCheck}")

                    def hasAccessToPage = ec.user.hasPermission(permToCheck)
                    return [granted: hasAccessToPage, landingPage: landingPage]
                ]]>
            </script>
        </actions>
    </service>

    <!-- Check if user is granted access to a specific page -->
    <service verb="authorize" noun="Component" authenticate="anonymous-view">
        <in-parameters>
            <parameter name="artifact"/>
            <parameter name="companyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="granted" type="boolean"/>
        </out-parameters>

        <actions>
            <script>
                <![CDATA[
                    def cl = artifact
                    if (cl.startsWith("/")) cl = cl.substring(1, cl.length())

                    def permToCheck = "COMPONENT_ACCESS_${cl}"
                    ec.logger.info("Checking permission: ${permToCheck}")

                    def hasAccessToComp = ec.user.hasPermission(permToCheck)
                    return [granted: hasAccessToComp]
                ]]>
            </script>
        </actions>
    </service>
</services>